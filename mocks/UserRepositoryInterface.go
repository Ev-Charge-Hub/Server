// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "Ev-Charge-Hub/Server/internal/domain/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UserRepositoryInterface is an autogenerated mock type for the UserRepositoryInterface type
type UserRepositoryInterface struct {
	mock.Mock
}

type UserRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepositoryInterface) EXPECT() *UserRepositoryInterface_Expecter {
	return &UserRepositoryInterface_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *UserRepositoryInterface) CreateUser(ctx context.Context, user *models.UserModel) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserModel) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepositoryInterface_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserRepositoryInterface_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *models.UserModel
func (_e *UserRepositoryInterface_Expecter) CreateUser(ctx interface{}, user interface{}) *UserRepositoryInterface_CreateUser_Call {
	return &UserRepositoryInterface_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *UserRepositoryInterface_CreateUser_Call) Run(run func(ctx context.Context, user *models.UserModel)) *UserRepositoryInterface_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.UserModel))
	})
	return _c
}

func (_c *UserRepositoryInterface_CreateUser_Call) Return(_a0 error) *UserRepositoryInterface_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepositoryInterface_CreateUser_Call) RunAndReturn(run func(context.Context, *models.UserModel) error) *UserRepositoryInterface_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUsernameOrEmail provides a mock function with given fields: ctx, usernameOrEmail
func (_m *UserRepositoryInterface) FindByUsernameOrEmail(ctx context.Context, usernameOrEmail string) (*models.UserModel, error) {
	ret := _m.Called(ctx, usernameOrEmail)

	if len(ret) == 0 {
		panic("no return value specified for FindByUsernameOrEmail")
	}

	var r0 *models.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.UserModel, error)); ok {
		return rf(ctx, usernameOrEmail)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.UserModel); ok {
		r0 = rf(ctx, usernameOrEmail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, usernameOrEmail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepositoryInterface_FindByUsernameOrEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUsernameOrEmail'
type UserRepositoryInterface_FindByUsernameOrEmail_Call struct {
	*mock.Call
}

// FindByUsernameOrEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - usernameOrEmail string
func (_e *UserRepositoryInterface_Expecter) FindByUsernameOrEmail(ctx interface{}, usernameOrEmail interface{}) *UserRepositoryInterface_FindByUsernameOrEmail_Call {
	return &UserRepositoryInterface_FindByUsernameOrEmail_Call{Call: _e.mock.On("FindByUsernameOrEmail", ctx, usernameOrEmail)}
}

func (_c *UserRepositoryInterface_FindByUsernameOrEmail_Call) Run(run func(ctx context.Context, usernameOrEmail string)) *UserRepositoryInterface_FindByUsernameOrEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepositoryInterface_FindByUsernameOrEmail_Call) Return(_a0 *models.UserModel, _a1 error) *UserRepositoryInterface_FindByUsernameOrEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepositoryInterface_FindByUsernameOrEmail_Call) RunAndReturn(run func(context.Context, string) (*models.UserModel, error)) *UserRepositoryInterface_FindByUsernameOrEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepositoryInterface creates a new instance of UserRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepositoryInterface {
	mock := &UserRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
