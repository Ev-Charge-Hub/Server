// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/ev_station_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "Ev-Charge-Hub/Server/internal/domain/models"
	models0 "Ev-Charge-Hub/Server/internal/repository/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEVStationRepository is a mock of EVStationRepository interface.
type MockEVStationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEVStationRepositoryMockRecorder
}

// MockEVStationRepositoryMockRecorder is the mock recorder for MockEVStationRepository.
type MockEVStationRepositoryMockRecorder struct {
	mock *MockEVStationRepository
}

// NewMockEVStationRepository creates a new mock instance.
func NewMockEVStationRepository(ctrl *gomock.Controller) *MockEVStationRepository {
	mock := &MockEVStationRepository{ctrl: ctrl}
	mock.recorder = &MockEVStationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEVStationRepository) EXPECT() *MockEVStationRepositoryMockRecorder {
	return m.recorder
}

// CreateStation mocks base method.
func (m *MockEVStationRepository) CreateStation(ctx context.Context, domainModel models.EVStation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStation", ctx, domainModel)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStation indicates an expected call of CreateStation.
func (mr *MockEVStationRepositoryMockRecorder) CreateStation(ctx, domainModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStation", reflect.TypeOf((*MockEVStationRepository)(nil).CreateStation), ctx, domainModel)
}

// EditStation mocks base method.
func (m *MockEVStationRepository) EditStation(ctx context.Context, domainModel models.EVStation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditStation", ctx, domainModel)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditStation indicates an expected call of EditStation.
func (mr *MockEVStationRepositoryMockRecorder) EditStation(ctx, domainModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditStation", reflect.TypeOf((*MockEVStationRepository)(nil).EditStation), ctx, domainModel)
}

// FindAllStations mocks base method.
func (m *MockEVStationRepository) FindAllStations(ctx context.Context) ([]models0.EVStationDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllStations", ctx)
	ret0, _ := ret[0].([]models0.EVStationDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllStations indicates an expected call of FindAllStations.
func (mr *MockEVStationRepositoryMockRecorder) FindAllStations(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllStations", reflect.TypeOf((*MockEVStationRepository)(nil).FindAllStations), ctx)
}

// FindBookingByUserName mocks base method.
func (m *MockEVStationRepository) FindBookingByUserName(ctx context.Context, userName string) (*models0.BookingDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBookingByUserName", ctx, userName)
	ret0, _ := ret[0].(*models0.BookingDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBookingByUserName indicates an expected call of FindBookingByUserName.
func (mr *MockEVStationRepositoryMockRecorder) FindBookingByUserName(ctx, userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBookingByUserName", reflect.TypeOf((*MockEVStationRepository)(nil).FindBookingByUserName), ctx, userName)
}

// FindBookingsByUserName mocks base method.
func (m *MockEVStationRepository) FindBookingsByUserName(ctx context.Context, username string) ([]models0.BookingDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBookingsByUserName", ctx, username)
	ret0, _ := ret[0].([]models0.BookingDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBookingsByUserName indicates an expected call of FindBookingsByUserName.
func (mr *MockEVStationRepositoryMockRecorder) FindBookingsByUserName(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBookingsByUserName", reflect.TypeOf((*MockEVStationRepository)(nil).FindBookingsByUserName), ctx, username)
}

// FindStationByConnectorID mocks base method.
func (m *MockEVStationRepository) FindStationByConnectorID(ctx context.Context, connectorID string) (*models0.EVStationDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStationByConnectorID", ctx, connectorID)
	ret0, _ := ret[0].(*models0.EVStationDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStationByConnectorID indicates an expected call of FindStationByConnectorID.
func (mr *MockEVStationRepositoryMockRecorder) FindStationByConnectorID(ctx, connectorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStationByConnectorID", reflect.TypeOf((*MockEVStationRepository)(nil).FindStationByConnectorID), ctx, connectorID)
}

// FindStationByID mocks base method.
func (m *MockEVStationRepository) FindStationByID(ctx context.Context, id string) (*models0.EVStationDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStationByID", ctx, id)
	ret0, _ := ret[0].(*models0.EVStationDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStationByID indicates an expected call of FindStationByID.
func (mr *MockEVStationRepositoryMockRecorder) FindStationByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStationByID", reflect.TypeOf((*MockEVStationRepository)(nil).FindStationByID), ctx, id)
}

// FindStationByUserName mocks base method.
func (m *MockEVStationRepository) FindStationByUserName(ctx context.Context, userName string) (*models0.EVStationDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStationByUserName", ctx, userName)
	ret0, _ := ret[0].(*models0.EVStationDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStationByUserName indicates an expected call of FindStationByUserName.
func (mr *MockEVStationRepositoryMockRecorder) FindStationByUserName(ctx, userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStationByUserName", reflect.TypeOf((*MockEVStationRepository)(nil).FindStationByUserName), ctx, userName)
}

// FindStations mocks base method.
func (m *MockEVStationRepository) FindStations(ctx context.Context, company, stationType, search, plugName string, isOpen *bool) ([]models0.EVStationDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStations", ctx, company, stationType, search, plugName, isOpen)
	ret0, _ := ret[0].([]models0.EVStationDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStations indicates an expected call of FindStations.
func (mr *MockEVStationRepositoryMockRecorder) FindStations(ctx, company, stationType, search, plugName, isOpen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStations", reflect.TypeOf((*MockEVStationRepository)(nil).FindStations), ctx, company, stationType, search, plugName, isOpen)
}

// RemoveStation mocks base method.
func (m *MockEVStationRepository) RemoveStation(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveStation", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveStation indicates an expected call of RemoveStation.
func (mr *MockEVStationRepositoryMockRecorder) RemoveStation(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveStation", reflect.TypeOf((*MockEVStationRepository)(nil).RemoveStation), ctx, id)
}

// SetBooking mocks base method.
func (m *MockEVStationRepository) SetBooking(ctx context.Context, id string, booking models0.BookingDB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBooking", ctx, id, booking)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBooking indicates an expected call of SetBooking.
func (mr *MockEVStationRepositoryMockRecorder) SetBooking(ctx, id, booking interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBooking", reflect.TypeOf((*MockEVStationRepository)(nil).SetBooking), ctx, id, booking)
}
