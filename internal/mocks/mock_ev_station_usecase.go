// Code generated by MockGen. DO NOT EDIT.
// Source: ev_station_usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	request "Ev-Charge-Hub/Server/internal/dto/request"
	response "Ev-Charge-Hub/Server/internal/dto/response"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEVStationUsecase is a mock of EVStationUsecase interface.
type MockEVStationUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockEVStationUsecaseMockRecorder
}

// MockEVStationUsecaseMockRecorder is the mock recorder for MockEVStationUsecase.
type MockEVStationUsecaseMockRecorder struct {
	mock *MockEVStationUsecase
}

// NewMockEVStationUsecase creates a new mock instance.
func NewMockEVStationUsecase(ctrl *gomock.Controller) *MockEVStationUsecase {
	mock := &MockEVStationUsecase{ctrl: ctrl}
	mock.recorder = &MockEVStationUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEVStationUsecase) EXPECT() *MockEVStationUsecaseMockRecorder {
	return m.recorder
}

// CreateStation mocks base method.
func (m *MockEVStationUsecase) CreateStation(ctx context.Context, request request.EVStationRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStation", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStation indicates an expected call of CreateStation.
func (mr *MockEVStationUsecaseMockRecorder) CreateStation(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStation", reflect.TypeOf((*MockEVStationUsecase)(nil).CreateStation), ctx, request)
}

// EditStation mocks base method.
func (m *MockEVStationUsecase) EditStation(ctx context.Context, req request.EditStationRequest) (*response.EVStationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditStation", ctx, req)
	ret0, _ := ret[0].(*response.EVStationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditStation indicates an expected call of EditStation.
func (mr *MockEVStationUsecaseMockRecorder) EditStation(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditStation", reflect.TypeOf((*MockEVStationUsecase)(nil).EditStation), ctx, req)
}

// FilterStations mocks base method.
func (m *MockEVStationUsecase) FilterStations(ctx context.Context, request request.StationFilterRequest) ([]response.EVStationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterStations", ctx, request)
	ret0, _ := ret[0].([]response.EVStationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterStations indicates an expected call of FilterStations.
func (mr *MockEVStationUsecaseMockRecorder) FilterStations(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterStations", reflect.TypeOf((*MockEVStationUsecase)(nil).FilterStations), ctx, request)
}

// GetBookingByUserName mocks base method.
func (m *MockEVStationUsecase) GetBookingByUserName(ctx context.Context, request request.GetBookingRequest) (*response.BookingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookingByUserName", ctx, request)
	ret0, _ := ret[0].(*response.BookingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookingByUserName indicates an expected call of GetBookingByUserName.
func (mr *MockEVStationUsecaseMockRecorder) GetBookingByUserName(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookingByUserName", reflect.TypeOf((*MockEVStationUsecase)(nil).GetBookingByUserName), ctx, request)
}

// GetBookingsByUserName mocks base method.
func (m *MockEVStationUsecase) GetBookingsByUserName(ctx context.Context, request request.GetBookingsRequest) ([]response.BookingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookingsByUserName", ctx, request)
	ret0, _ := ret[0].([]response.BookingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookingsByUserName indicates an expected call of GetBookingsByUserName.
func (mr *MockEVStationUsecaseMockRecorder) GetBookingsByUserName(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookingsByUserName", reflect.TypeOf((*MockEVStationUsecase)(nil).GetBookingsByUserName), ctx, request)
}

// GetStationByConnectorID mocks base method.
func (m *MockEVStationUsecase) GetStationByConnectorID(ctx context.Context, request request.GetStationByConnectorIDRequest) (*response.EVStationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStationByConnectorID", ctx, request)
	ret0, _ := ret[0].(*response.EVStationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStationByConnectorID indicates an expected call of GetStationByConnectorID.
func (mr *MockEVStationUsecaseMockRecorder) GetStationByConnectorID(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStationByConnectorID", reflect.TypeOf((*MockEVStationUsecase)(nil).GetStationByConnectorID), ctx, request)
}

// GetStationByID mocks base method.
func (m *MockEVStationUsecase) GetStationByID(ctx context.Context, request request.GetStationByIDRequest) (*response.EVStationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStationByID", ctx, request)
	ret0, _ := ret[0].(*response.EVStationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStationByID indicates an expected call of GetStationByID.
func (mr *MockEVStationUsecaseMockRecorder) GetStationByID(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStationByID", reflect.TypeOf((*MockEVStationUsecase)(nil).GetStationByID), ctx, request)
}

// GetStationByUserName mocks base method.
func (m *MockEVStationUsecase) GetStationByUserName(ctx context.Context, request request.GetStationByUsernameRequest) (*response.EVStationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStationByUserName", ctx, request)
	ret0, _ := ret[0].(*response.EVStationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStationByUserName indicates an expected call of GetStationByUserName.
func (mr *MockEVStationUsecaseMockRecorder) GetStationByUserName(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStationByUserName", reflect.TypeOf((*MockEVStationUsecase)(nil).GetStationByUserName), ctx, request)
}

// RemoveStation mocks base method.
func (m *MockEVStationUsecase) RemoveStation(ctx context.Context, request request.RemoveStationRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveStation", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveStation indicates an expected call of RemoveStation.
func (mr *MockEVStationUsecaseMockRecorder) RemoveStation(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveStation", reflect.TypeOf((*MockEVStationUsecase)(nil).RemoveStation), ctx, request)
}

// SetBooking mocks base method.
func (m *MockEVStationUsecase) SetBooking(ctx context.Context, request request.SetBookingRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBooking", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBooking indicates an expected call of SetBooking.
func (mr *MockEVStationUsecaseMockRecorder) SetBooking(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBooking", reflect.TypeOf((*MockEVStationUsecase)(nil).SetBooking), ctx, request)
}

// ShowAllStations mocks base method.
func (m *MockEVStationUsecase) ShowAllStations(ctx context.Context) ([]response.EVStationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowAllStations", ctx)
	ret0, _ := ret[0].([]response.EVStationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowAllStations indicates an expected call of ShowAllStations.
func (mr *MockEVStationUsecaseMockRecorder) ShowAllStations(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowAllStations", reflect.TypeOf((*MockEVStationUsecase)(nil).ShowAllStations), ctx)
}
